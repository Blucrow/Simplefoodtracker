@page "/scan"
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<div class="d-flex justify-center align-items-center" style="padding-top:2%">
	<MudPaper MaxWidth="600px">
		<MudStack Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.Center">
			<MudButton Variant="Variant.Filled"
			Color="Color.Secondary"
			EndIcon="@Icons.Material.Filled.Scanner"
			Disabled="@_disableButton"
			OnClick="@StartScan">Scan Barcode</MudButton>
			<MudText Typo="Typo.body1">or enter Barcode manually</MudText>
			<MudTextField Variant="Variant.Outlined" T="string" Label="Barcode" InputType="InputType.Number" @bind-Value="@_manualBarcode" Immediate="true" />
			<MudButton Variant="Variant.Filled"
			Color="Color.Secondary"
			EndIcon="@Icons.Material.Filled.Search"
			Disabled="@_disableButton"
			OnClick="@(async () => await OnBarcodeScanned(_manualBarcode))">Search</MudButton>
			<div id="qr-reader" style="width: 300px;"></div>
			@if (_scanEnabled)
			{
				<MudButton OnClick="@StopScan" Variant="Variant.Outlined" Color="Color.Secondary">Cancel</MudButton>
			}
			@if (Product != null)
			{
				<SearchProductResult Product="@Product"></SearchProductResult>
			}
		</MudStack>
	</MudPaper>
</div>

<MudOverlay AutoClose="false" Visible="@_loading" DarkBackground>
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
@code {

	[Inject]
	public CustomNavigationService Nav { get; set; } = null!;
	[Inject]
	public IndexedDbAccessor DbAccess { get; set; } = null!;

	private bool _scanEnabled = false;
	private bool _loading = false;
	private bool _disableButton = false;
	private Product? Product = null;
	private string _manualBarcode = "";

	private DotNetObjectReference<ScanBarcode>? _dotNetRef;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var personalInfo = await DbAccess.LoadData<PersonalInfo>("info");
		if (personalInfo == null)
			Nav.NavigateTo("./create");
	}

	private async Task StartScan()
	{
		_disableButton = true;
		_scanEnabled = true;
		StateHasChanged();
		_dotNetRef = DotNetObjectReference.Create(this);
		await JS.InvokeVoidAsync("qrScannerInterop.startScanner", "qr-reader", _dotNetRef);
	}

	private async Task StopScan()
	{
		_scanEnabled = false;
		_loading = false;
		_disableButton = false;
		await JS.InvokeVoidAsync("qrScannerInterop.stopScanner");
		StateHasChanged();

	}

	[JSInvokable]
	public async Task OnBarcodeScanned(string code)
	{
		if (string.IsNullOrEmpty(code)) return;
		await JS.InvokeVoidAsync("qrScannerInterop.stopScanner");
		var consumed = await DbAccess.LoadData<List<Product>>("consumed");
		_loading = true;
		_scanEnabled = false;
		StateHasChanged();
		if (consumed != null && consumed.Any(c => c.Barcode == code))
			Product = consumed.Single(c => c.Barcode == code);
		else
			Product = await Foodservice.GetProductByBarcode(code);

		_loading = false;
		_disableButton = false;
		if (Product == null)
		{
			Snackbar.Add("Product not found. Please add it manually or try again", Severity.Error);
		}
		else
			Product!.Barcode = code;
		StateHasChanged();
	}


}
